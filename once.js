function once(fn) {
  let done = false;
  return () => {
    if (!done) {
      fn.apply(null, arguments);
      done = true;
    }
  }
}
function test() {
  console.log('1111');
}
const myTest = once(test);
myTest();
myTest();
myTest();
myTest();
myTest();
myTest();



// http/0.9 http 1.0 http 1.1 http2
// http/1.0 --->  无连接， 每一次请求都需要一个TCP链接， 但可以使用 Connection：keep-alive 来保持连接
// http/1.1 --->  1. 长连接（默认是打开Connection： keep-alive）。 如在一个html里面的资源（图片， 视频，音频等）请求时候不需要再建立连接
// http/1.1 --->  2. 管道机制：客户端可以一次性发送多个请求， 但是服务端还是得一个一个响应返回， 这样客户端才能对应上
// http/1.1 --->  3. HOST头部：添加了 host 头部， 用来指定当前请求的域名和端口（由于虚拟主机的发展，导致一个机器上可以部署多个应该，于是用host 来执行域名和端口）
// http/1.1 --->  4. 增加了缓存机制的一些头部信息： last-modified/is-modified-since，catch-control 等
// http/1.1 --->  5. 增加了请求方法等： OPTION, DELETE等

// http/2 ---> 1. 二进制分帧：http2通信的最小单位变成了帧，在应用层和传输层职期间加了一个二进制分帧层， 
//                          将应用层传过来的数据分割成更小的消息和帧，如将头部信息变成 header 帧， body 变成 body 帧。每个帧都有一个顺序的标识
//             2. 多路 复 用：  有了二进制分帧， 我们传输的时候是可以并发的传输， 不需要按照顺序来发送。客户端得到消息的时候可以根据帧的标识来对数据进行排序，整个的过程如下：
//                          客户端一次性可以发送多个请求，客户端不用顺序的响应这样请求， 如果发现A 请求的时间过长，会先把A请求已经处理的了的响应。然后区域处理B 请求，处理完了B请求， 再去处理A没有处理的
//             3. 首部  压缩：  客户端和服务都都维护相应的 头部表， 里面保存头部字段及其响应的value。第一次请求或者响应， 这些头部字段会发送一次， 如果下次没有要更改，就不会发送了。， 如果有增加和删除的， 就只发送增加和删除的字段即可。这样就大大减少首部字段开支
//             4. 服务器推送: 服务器可以向客户端推送资源，对于推送静态资源比较好。
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
//  http协议-- 超文本传输协议： 1. 超文本：传输的不只是普调的文本， 而向视频，图片等这样的资源也是可以进行传输的。2：传输： 两个机器的通信，中间， 协议： 就是一个约定。
//  计算机网络体系是有 个层以及它们的协议构成， 可分为：OSI网络体系： TCP/IP 四层体系， TCP/IP 五层体系,  TCP/IP 四层体系。






